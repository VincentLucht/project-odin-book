// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_GLOBAL")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum UserRole {
  CONTRIBUTOR
  BASIC
}

enum CommunityType {
  PUBLIC
  PRIVATE
  RESTRICTED
}

model UserSettings {
  id                String  @id @default(uuid())
  community_enabled Boolean @default(true)
  posts_enabled     Boolean @default(true)
  comments_enabled  Boolean @default(true)
  mods_enabled      Boolean @default(true)
  chats_enabled     Boolean @default(true)
  follows_enabled   Boolean @default(true)

  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])
}

model User {
  id                  String    @id @default(uuid())
  username            String    @unique @db.VarChar(20)
  email               String    @unique @db.VarChar(320)
  password            String
  display_name        String?   @db.VarChar(40)
  profile_picture_url String?
  description         String?   @db.VarChar(200)
  cake_day            String?
  created_at          DateTime  @default(now())
  deleted_at          DateTime?
  is_mature           Boolean   @default(false)

  post_karma    Int @default(0)
  comment_karma Int @default(0)

  banned_users           BannedUser[]
  user_communities       UserCommunity[]
  community              Community[]
  community_moderator    CommunityModerator[]
  comment                Comment[]
  post_vote              PostVote[]
  comment_votes          CommentVote[]
  chat                   Chat[]
  message                Message[]
  user_chats             UserChats[]
  chat_admin             ChatAdmin[]
  join_request           JoinRequest[]
  user_assigned_flair    UserAssignedFlair[]
  post                   Post[]
  recent_communities     RecentCommunities[]
  user_settings          UserSettings?
  sent_notifications     Notification[]       @relation("Sender")
  received_notifications Notification[]       @relation("Receiver")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model JoinRequest {
  id           String        @id @default(uuid())
  user_id      String
  user         User          @relation(fields: [user_id], references: [id])
  community_id String
  community    Community     @relation(fields: [community_id], references: [id])
  requested_at DateTime      @default(now())
  status       RequestStatus @default(PENDING)
  message      String?       @db.VarChar(500)

  @@unique([user_id, community_id])
}

model UserCommunity {
  id           String    @id @unique @default(uuid())
  user_id      String
  user         User      @relation(fields: [user_id], references: [id])
  community_id String
  community    Community @relation(fields: [community_id], references: [id])
  joined_at    DateTime  @default(now())
  role         UserRole

  @@unique([user_id, community_id])
}

model MainTopic {
  id     String  @id @default(uuid())
  name   String  @unique
  topics Topic[]
}

model Topic {
  id               String            @id @default(uuid())
  name             String            @unique
  main_category_id String
  main_category    MainTopic         @relation(fields: [main_category_id], references: [id])
  community_topics CommunityTopics[]

  @@index([main_category_id])
}

model CommunityTopics {
  id           String    @id @default(uuid())
  community_id String
  community    Community @relation(fields: [community_id], references: [id])
  topic_id     String
  topic        Topic     @relation(fields: [topic_id], references: [id])

  @@index([community_id, topic_id])
  @@index([topic_id])
}

model RecentCommunities {
  id            String    @id @default(uuid())
  interacted_at DateTime  @default(now())
  community_id  String
  community     Community @relation(fields: [community_id], references: [id])
  user_id       String
  user          User      @relation(fields: [user_id], references: [id])

  @@unique([community_id, user_id])
  @@unique([interacted_at])
}

model CommunityRule {
  id           String    @id @default(uuid())
  order        Int
  title        String    @db.VarChar(100)
  text         String    @db.VarChar(500)
  community_id String
  community    Community @relation(fields: [community_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())

  @@unique([community_id, order])
  @@index([community_id])
}

model Community {
  id                     String   @id @default(uuid())
  name                   String   @unique @db.VarChar(21)
  description            String?  @db.VarChar(500)
  profile_picture_url    String?
  banner_url_desktop     String?
  banner_url_mobile      String?
  created_at             DateTime @default(now())
  is_mature              Boolean  @default(false)
  is_post_flair_required Boolean  @default(false)
  allow_basic_user_posts Boolean  @default(true)
  total_members          Int      @default(0)

  type             CommunityType
  community_topics CommunityTopics[]
  owner_id         String
  owner            User              @relation(fields: [owner_id], references: [id])

  banned_users         BannedUser[]
  user_communities     UserCommunity[]
  community_moderators CommunityModerator[]
  posts                Post[]
  community_flair      CommunityFlair[]
  join_request         JoinRequest[]
  recent_communities   RecentCommunities[]
  community_rules      CommunityRule[]

  @@index([name])
}

model CommunityModerator {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  user_id      String
  user         User      @relation(fields: [user_id], references: [id])
  community_id String
  community    Community @relation(fields: [community_id], references: [id])
  is_active    Boolean   @default(true)

  post_moderations    PostModeration[]
  comment_moderations CommentModeration[]

  @@unique([community_id, user_id])
}

enum ModerationType {
  APPROVED
  REMOVED
}

model PostModeration {
  id           String             @id @default(uuid())
  post_id      String             @unique
  post         Post               @relation(fields: [post_id], references: [id])
  moderator_id String
  moderator    CommunityModerator @relation(fields: [moderator_id], references: [id])
  action       ModerationType
  reason       String?            @db.VarChar(20)
  created_at   DateTime           @default(now())

  @@index([post_id])
  @@index([moderator_id])
}

enum PostType {
  BASIC
  IMAGES
  POLL
}

model Post {
  id                  String    @id @default(uuid())
  community_id        String
  community           Community @relation(fields: [community_id], references: [id])
  poster_id           String?
  poster              User?     @relation(fields: [poster_id], references: [id])
  title               String    @db.VarChar(300)
  body                String    @db.VarChar(40000)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  edited_at           DateTime?
  deleted_at          DateTime?
  is_spoiler          Boolean
  is_mature           Boolean
  pinned_at           DateTime?
  upvote_count        Int       @default(0)
  downvote_count      Int       @default(0)
  total_vote_score    Int       @default(0)
  total_comment_score Int       @default(0)

  lock_comments Boolean @default(false)

  post_type           PostType
  comments            Comment[]
  post_votes          PostVote[]
  post_assigned_flair PostAssignedFlair[]

  moderation PostModeration?

  @@index([title])
  @@index([created_at])
  @@index([community_id])
  @@index([pinned_at])
  @@index([total_vote_score])
  @@index([community_id, created_at]) // for sorted by date
  @@index([community_id, total_vote_score]) // for sorted by score
  @@index([poster_id, created_at]) // for user post history
  @@index([community_id, created_at, deleted_at]) // for fetching
}

model PostVote {
  id         String   @id @default(uuid())
  post_id    String
  post       Post     @relation(fields: [post_id], references: [id])
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  vote_type  VoteType

  @@unique([post_id, user_id])
  @@index([post_id])
}

model CommentModeration {
  id           String             @id @default(uuid())
  comment_id   String             @unique
  post         Comment            @relation(fields: [comment_id], references: [id])
  moderator_id String
  moderator    CommunityModerator @relation(fields: [moderator_id], references: [id])
  action       ModerationType
  reason       String?             @db.VarChar(20)
  created_at   DateTime           @default(now())

  @@index([comment_id])
  @@index([moderator_id])
}

model Comment {
  id               String    @id @default(uuid())
  content          String    @db.VarChar(10000)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  edited_at        DateTime?
  is_deleted       Boolean   @default(false)
  upvote_count     Int       @default(0)
  downvote_count   Int       @default(0)
  total_vote_score Int       @default(0)

  moderator_id String?
  moderation   CommentModeration?

  post_id       String
  post          Post          @relation(fields: [post_id], references: [id])
  user_id       String?
  user          User?         @relation(fields: [user_id], references: [id])
  comment_votes CommentVote[]

  // Parent relation
  parent_comment_id String?
  parent_comment    Comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [id])
  // Child relation
  replies           Comment[] @relation("CommentReplies")

  @@index([post_id]) // for lookups of comments by post
  @@index([parent_comment_id]) // for comment replies
  @@index([user_id]) // for user comment history
  @@index([created_at])
  @@index([total_vote_score]) // for score-based sorting
  @@index([created_at, id]) // for date sorting
  @@index([user_id, created_at]) // for user history with date sorting
  @@index([user_id, total_vote_score]) // for user history with score sorting
}

model CommentVote {
  id         String   @id @default(uuid())
  comment_id String
  comment    Comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  vote_type  VoteType

  @@unique([comment_id, user_id])
  @@index([comment_id])
}

enum NotificationType {
  COMMUNITYMESSAGE
  POSTREPLY
  COMMENTREPLY
  MODMESSAGE
  CHATMESSAGE
  NEWFOLLOWER
}

model Notification {
  id         String           @id @default(uuid())
  message    String?
  created_at DateTime         @default(now())
  type       NotificationType

  sender_id   String
  sender      User   @relation("Sender", fields: [sender_id], references: [id])
  receiver_id String
  receiver    User   @relation("Receiver", fields: [receiver_id], references: [id])

  @@index([sender_id, receiver_id])
}

model BannedUser {
  id           String    @id @default(uuid())
  user_id      String
  user         User      @relation(fields: [user_id], references: [id])
  community_id String
  community    Community @relation(fields: [community_id], references: [id])
  banned_at    DateTime
  ban_reason   String    @db.VarChar(500)
  ban_duration DateTime

  @@index([user_id, community_id])
}

model CommunityFlair {
  id                     String    @id @default(uuid())
  community_id           String
  community              Community @relation(fields: [community_id], references: [id])
  name                   String    @db.VarChar(20)
  textColor              String    @db.VarChar(7)
  color                  String    @db.VarChar(7)
  is_assignable_to_posts Boolean   @default(false)
  is_assignable_to_users Boolean   @default(false)
  emoji                  String?   @db.VarChar(8)

  user_assigned_flair UserAssignedFlair[]
  post_assigned_flair PostAssignedFlair[]

  @@index([community_id])
  @@index([community_id, is_assignable_to_posts])
  @@index([community_id, is_assignable_to_users])
}

model UserAssignedFlair {
  id                 String         @id @default(uuid())
  user_id            String
  user               User           @relation(fields: [user_id], references: [id])
  community_flair_id String
  community_flair    CommunityFlair @relation(fields: [community_flair_id], references: [id], onDelete: Cascade)

  @@unique([user_id, community_flair_id])
  @@index([community_flair_id])
}

model PostAssignedFlair {
  id                 String         @id @default(uuid())
  post_id            String
  post               Post           @relation(fields: [post_id], references: [id])
  community_flair_id String
  community_flair    CommunityFlair @relation(fields: [community_flair_id], references: [id], onDelete: Cascade)

  @@unique([post_id, community_flair_id])
}

model Chat {
  id                  String      @id @default(uuid())
  name                String      @db.VarChar(100)
  time_created        DateTime    @default(now())
  profile_picture_url String?
  is_group_chat       Boolean     @default(false)
  chat_description    String?     @db.VarChar(200)
  updated_at          DateTime    @updatedAt
  last_message_id     String?     @unique
  owner_id            String
  owner               User        @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  last_message        Message?    @relation("LastMessage", fields: [last_message_id], references: [id], onDelete: SetNull)
  messages            Message[]   @relation("ChatMessages")
  userChats           UserChats[]
  chatAdmins          ChatAdmin[]

  @@index([updated_at])
}

model Message {
  id                String   @id @default(uuid())
  content           String   @db.VarChar(10000)
  time_created      DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           String
  is_system_message Boolean  @default(false)
  chat              Chat     @relation("ChatMessages", fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id           String
  last_message_chat Chat?    @relation("LastMessage")
  iv                String

  @@index([chat_id, time_created])
  @@index([chat_id, user_id])
}

model UserChats {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  chat      Chat     @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id   String
  joined_at DateTime @default(now())

  @@unique([user_id, chat_id])
}

model ChatAdmin {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  chat    Chat   @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id String

  @@unique([user_id, chat_id])
}
